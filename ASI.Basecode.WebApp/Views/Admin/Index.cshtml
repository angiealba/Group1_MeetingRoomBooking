@model IEnumerable<ASI.Basecode.Data.Models.User>
@using Microsoft.AspNetCore.Mvc.ModelBinding

@{
	var currentPage = ViewBag.CurrentPage ?? 1;
	var totalPages = ViewBag.TotalPages ?? 1;
	var searchQuery = ViewBag.SearchQuery ?? string.Empty;
}
<br />

<h1 class="font-weight-bold mb-3">Admin Management</h1>
<div class="d-flex justify-content-between align-items-center mb-3">
	<button class="btn btn-dark" data-toggle="modal" data-target="#createUserModal">Add New Admin</button>
	<form class="form-inline" method="POST">
		<input class="form-control mr-sm-2" type="search" placeholder="Search admins" aria-label="Search" name="search" value="@searchQuery">
		<button class="btn btn-outline-dark my-2 my-sm-0" type="submit">Search</button>
	</form>
</div>

@if (!ViewData.ModelState.IsValid)
{
	<div class="alert alert-danger">
		<ul>
			@foreach (var error in ViewData.ModelState.Values.SelectMany(v => v.Errors))
			{
				<li>@error.ErrorMessage</li>
			}
		</ul>
	</div>
}

<div class="table-responsive">
	<table class="table table-striped mt-3 align-middle">
		<thead>
			<tr>
				<th>Username</th>
				<th>Name</th>
				<th>Email</th>
				<th>Created Time</th>
				<th class="action-column">Actions</th>
			</tr>
		</thead>
		<tbody>
			@if (Model.Where(u => u.role == "Admin").Any())
			{
				@foreach (var user in Model.Where(u => u.role == "Admin").OrderByDescending(u => u.createdTime))
				{
					<tr>
						<td>@user.userName</td>
						<td>@user.name</td>
						<td>@user.email</td>
						<td>@user.createdTime</td>
						<td>
							<button type="button" class="btn btn-sm btn-outline-dark" data-toggle="modal" data-target="#editUserModal-@user.ID">
								Edit
							</button>
							<button type="button" class="btn btn-sm btn-danger" data-toggle="modal" data-target="#deleteUserModal-@user.ID">
								Delete
							</button>
						</td>
					</tr>
				}		}
			else
			{
				<tr>
					<td colspan="5" class="text-center">No admins found</td>
				</tr>
			}
	</table>
</div>

@* Pagination *@
<nav aria-label="Page navigation">
	<ul class="pagination justify-content-center">
		<!-- "First Page" button -->
		@if (currentPage > 1)
		{
			<li class="page-item">
				<a class="page-link" href="?page=1&search=@searchQuery" aria-label="First">
					<span aria-hidden="true">&laquo;</span>
				</a>
			</li>
		}
		<!-- Page numbers -->
		@for (int i = 1; i <= totalPages; i++)
		{
			<li class="page-item @(i == currentPage ? "active" : "")">
				<a class="page-link" href="?page=@i&search=@searchQuery">@i</a>
			</li>
		}
		<!-- "Last Page" button -->
		@if (currentPage < totalPages)
		{
			<li class="page-item">
				<a class="page-link" href="?page=@totalPages&search=@searchQuery" aria-label="Last">
					<span aria-hidden="true">&raquo;</span>
				</a>
			</li>
		}
	</ul>
</nav>

<!-- Create User Modal -->
<div class="modal fade" id="createUserModal" tabindex="-1" aria-labelledby="createUserModalLabel" aria-hidden="true">
	<div class="modal-dialog modal-dialog-centered">
		<div class="modal-content">
			<div class="modal-header">
				<h5 class="modal-title" id="createUserModalLabel">Add New Admin</h5>
				<button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button>
			</div>
			<form id="createUserForm" asp-action="Register" method="post">
				<div class="modal-body">
					@Html.AntiForgeryToken()
					<!-- Show validation error messages -->
					@if (!ViewData.ModelState.IsValid)
					{
						<div class="alert alert-danger">
							<ul>
								@foreach (var error in ViewData.ModelState.Values.SelectMany(v => v.Errors))
								{
									<li>@error.ErrorMessage</li>
								}
							</ul>
						</div>
					}

					<div class="form-group">
						<label for="userNameCreate">Username</label>
						<input type="text" class="form-control" id="userName" name="userName" value="@ViewBag.UserViewModel?.userName" required>
					</div>

					<div class="form-group">
						<label for="NameCreate">Name</label>
						<input type="text" class="form-control" id="name" name="name" value="@ViewBag.UserViewModel?.name" required>
					</div>
					<div class="form-group">
						<label for="EmailCreate">Email</label>
						<input type="email" class="form-control" id="email" name="email" value="@ViewBag.UserViewModel?.email" required>
					</div>

					<div class="form-group">
						<label for="Password">Password</label>
						<input type="password" class="form-control" id="Password" name="Password" required>
						<small id="passwordError" class="text-danger" style="display: none;">
							Password must be at least 8 characters long and include an uppercase letter, a lowercase letter, a number, and a special character.
						</small>
					</div>


					<div class="form-group">
						<label for="ConfirmPassword">Confirm Password</label>
						<input type="password" class="form-control" id="ConfirmPassword" name="ConfirmPassword" required>
						<small id="confirmPasswordError" class="text-danger" style="display: none;">
							Passwords do not match.
						</small>
					</div>
				</div>
				<div class="modal-footer">
					<button type="reset" class="btn btn-secondary" data-dismiss="modal">Cancel</button>
					<button type="submit" class="btn btn-success">Add Admin</button>
				</div>
				<script>
					document.getElementById("createUserForm").addEventListener("submit", function (e) {
						const password = document.getElementById("Password").value;
						const confirmPassword = document.getElementById("ConfirmPassword").value;

						// Strong password regex
						const strongPasswordRegex = /^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[!#$%^&*])[A-Za-z\d!#$%^&*]{8,}$/;

						let isValid = true;

						// Validate password strength
						if (!strongPasswordRegex.test(password)) {
							document.getElementById("passwordError").style.display = "block";
							isValid = false;
						} else {
							document.getElementById("passwordError").style.display = "none";
						}

						// Validate password confirmation
						if (password !== confirmPassword) {
							document.getElementById("confirmPasswordError").style.display = "block";
							isValid = false;
						} else {
							document.getElementById("confirmPasswordError").style.display = "none";
						}

						if (!isValid) {
							e.preventDefault(); // Prevent form submission
						}
					});
				</script>
			</form>
		</div>
	</div>
</div>




<!-- Edit User Modal -->
@foreach (var user in Model)
{
    <div class="modal fade" id="editUserModal-@user.ID" tabindex="-1" aria-labelledby="editUserModalLabel-@user.ID" aria-hidden="true">
        <div class="modal-dialog modal-dialog-centered">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="editUserModalLabel-@user.ID">Edit Admin</h5>
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button>
                </div>
                <form id="editUserForm-@user.ID" asp-action="EditUser" method="post">
                    <div class="modal-body">
                        @Html.AntiForgeryToken()
                        <input type="hidden" name="Id" value="@user.ID" />
                        <div class="mb-3">
                            <label for="userNameEdit-@user.ID" class="form-label">Username</label>
                            <input type="text" class="form-control" id="userNameEdit-@user.ID" name="userName" value="@user.userName" disabled>
                        </div>
                        <div class="mb-3">
                            <label for="nameEdit-@user.ID" class="form-label">Name</label>
                            <input type="text" class="form-control" id="NameEdit-@user.ID" name="name" value="@user.name" readonly>
                        </div>
                        <div class="mb-3">
                            <label for="EmailEdit-@user.ID" class="form-label">Email</label>
                            <input type="email" class="form-control" id="EmailEdit-@user.ID" name="Email" value="@user.email" required>
                        </div>
                        <div class="mb-3">
                            <label for="PasswordEdit-@user.ID" class="form-label">Password</label>
                            <input type="password" class="form-control" id="PasswordEdit-@user.ID" name="Password" placeholder="Leave blank to keep existing password">
                            <small id="passwordError-@user.ID" class="text-danger" style="display: none;">
                                Password must be at least 8 characters long and include an uppercase letter, a lowercase letter, a number, and a special character.
                            </small>
                        </div>
                        <div class="mb-3">
                            <label for="ConfirmPasswordEdit-@user.ID" class="form-label">Confirm Password</label>
                            <input type="password" class="form-control" id="ConfirmPasswordEdit-@user.ID" name="ConfirmPassword" placeholder="Leave blank to keep existing password">
                            <div id="passwordMismatchError-@user.ID" class="text-danger" style="display: none;">Passwords do not match!</div>
                        </div>
                    </div>
                    <div class="modal-footer">
                        <button type="reset" id="editCancelButton-@user.ID" class="btn btn-secondary" data-dismiss="modal">Cancel</button>
                        <button type="submit" class="btn btn-success">Update Admin</button>
                    </div>
					 <script>
        document.getElementById("editUserForm-@user.ID").addEventListener("submit", function (event) {
            var password = document.getElementById("PasswordEdit-@user.ID").value;
            var confirmPassword = document.getElementById("ConfirmPasswordEdit-@user.ID").value;

            // Strong password regex
            const strongPasswordRegex = /^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[!#$%^&*])[A-Za-z\d!#$%^&*]{8,}$/;

            let isValid = true;

            // Validate password strength
            if (password && !strongPasswordRegex.test(password)) {
                document.getElementById("passwordError-@user.ID").style.display = "block";
                isValid = false;
            } else {
                document.getElementById("passwordError-@user.ID").style.display = "none";
            }

            // Check if passwords match, show error if not
            if (password !== confirmPassword && password !== "" && confirmPassword !== "") {
                event.preventDefault();
                document.getElementById("passwordMismatchError-@user.ID").style.display = "block";
                document.getElementById("passwordMismatchError-@user.ID").innerText = "Passwords do not match!";
            } else {
                document.getElementById("passwordMismatchError-@user.ID").style.display = "none";
            }

            // Prevent form submission if there are validation errors
            if (!isValid) {
                event.preventDefault();
            }
        });
    </script>
                </form>
            </div>
        </div>
    </div>

   
}


<!-- Delete User Modal -->
@foreach (var user in Model)
{
	<div class="modal fade" id="deleteUserModal-@user.ID" tabindex="-1" role="dialog" aria-labelledby="deleteUserModalLabel-@user.ID" aria-hidden="true">
		<div class="modal-dialog modal-dialog-centered" role="document">
			<div class="modal-content">
				<div class="modal-header">
					<h5 class="modal-title" id="deleteUserModalLabel-@user.ID">Delete Admin</h5>
					<button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button>
				</div>
				<form asp-action="DeleteUser" method="post">
					<div class="modal-body">
						<input type="hidden" name="Id" value="@user.ID" />
						<p>Are you sure you want to delete this admin?</p>
						<p><strong>Admin Details:</strong></p>
						<p>
							Username: @user.userName <br />
							Name: @user.name <br />
							Email: @user.email <br />
						</p>
					</div>
					<div class="modal-footer">
						<button type="reset" id="cancelButton-@user.ID" class="btn btn-secondary" data-dismiss="modal">Cancel</button>
						<button type="submit" class="btn btn-danger">Delete</button>
					</div>
				</form>
			</div>
		</div>
	</div>
}

@section scripts {
	<script>
		var errorMessage = '@TempData["ErrorMessage"]';
		if (errorMessage) {
			toastr.error(errorMessage);
		}

		var successMessage = '@TempData["SuccessMessage"]';
		if (successMessage) {
			toastr.success(successMessage);
		}
	</script>

}
<script>
	const passwordInput = document.getElementById('password');
	const passwordRequirements = document.getElementById('passwordRequirements');

	//  dispolay requirements
	passwordInput.addEventListener('focus', function () {
		passwordRequirements.style.display = 'block';
	});

	// if not hover hide
	passwordInput.addEventListener('blur', function () {
		passwordRequirements.style.display = 'none';
	});

	// password match
	const confirmPasswordInput = document.getElementById('confirmPassword');
	const passwordMismatchError = document.getElementById('passwordMismatchError');

	confirmPasswordInput.addEventListener('input', function () {
		if (passwordInput.value !== confirmPasswordInput.value) {
			passwordMismatchError.style.display = 'block';
		} else {
			passwordMismatchError.style.display = 'none';
		}
	});
</script>