@model IEnumerable<ASI.Basecode.Data.Models.Notification>

<div class="container mt-5">
    <h1 class="font-weight-bold mb-3">@ViewData["Title"]</h1>
    <h1 class="font-weight-bold mb-3">Notifications</h1>

    <div id="notificationsContainer">
        @if (Model != null && Model.Any())
        {
            foreach (var notification in Model)
            {
                <div class="notification-item @(notification.IsRead ? "" : "unread")" data-notification-id="@notification.Id">
                    <div class="notification-content" data-toggle="modal" data-target="#viewNotificationModal"
                         data-notification-id="@notification.Id"
                         data-notification-message="@notification.Message"
                         data-notification-date="@notification.Date.ToString("F")">
                        <div class="notification-body mt-2">
                            <p>@notification.Message</p>
                            <div class="notification-date">
                                @notification.Date.ToString("MMMM dd, yyyy HH:mm:ss")
                            </div>
                        </div>
                    </div>
                    <form asp-action="DeleteNotification" method="post" style="display:inline;">
                        @Html.AntiForgeryToken()
                        <input type="hidden" name="id" value="@notification.Id" />
                        <button type="submit" class="delete-notification btn btn-link" title="Delete Notification" style="color: red;">X</button>
                    </form>
                </div>
            }
        }
        else
        {
            <div class="alert alert-info">
                <strong>No notifications found.</strong>
            </div>
        }
    </div>
</div>

<div class="toast-container"></div>


@section scripts {
    <script>

        var errorMessage = '@TempData["ErrorMessage"]';
        if (errorMessage) {
            toastr.error(errorMessage);
        }

        var successMessage = '@TempData["SuccessMessage"]';
        if (successMessage) {
            toastr.success(successMessage);
        }
    </script>

    <script>
        // Declare a set to keep track of notified booking IDs
        const notifiedBookings = new Set();

        function showToast(notificationMessage, timeLeftMessage) {
            const toastContainer = document.querySelector('.toast-container') || createToastContainer();


            const existingToast = toastContainer.querySelector('.toast');
            if (existingToast) {
                $(existingToast).fadeOut(function () {
                    $(this).remove();
                });
            }

            const toastElement = document.createElement('div');
            toastElement.classList.add('toast');
            toastElement.setAttribute('role', 'alert');
            toastElement.setAttribute('aria-live', 'assertive');
            toastElement.setAttribute('aria-atomic', 'true');

            toastElement.innerHTML = `
                            <div class="toast-header">
                                <strong class="mr-auto">Booking Reminder</strong>
                                <small>Just now</small>
                                <button type="button" class="close" data-dismiss="toast" aria-label="Close">
                                    <span aria-hidden="true">&times;</span>
                                </button>
                            </div>
                            <div class="toast-body">
                                ${notificationMessage}<br><strong>${timeLeftMessage}</strong>
                            </div>
                        `;

            toastContainer.appendChild(toastElement);


            $(toastElement).fadeIn();


            setTimeout(() => {
                $(toastElement).fadeOut(function () {
                    $(this).remove();
                });
            }, 5000);

            // closebtn
            const closeButton = toastElement.querySelector('.close');
            closeButton.addEventListener('click', () => {
                $(toastElement).fadeOut(function () {
                    $(this).remove();
                });
            });
        }

        // create container for toastr if it doesn't exist
        function createToastContainer() {
            const toastContainer = document.createElement('div');
            toastContainer.classList.add('toast-container');
            document.body.appendChild(toastContainer);
            return toastContainer;
        }

        // fetch new notifs
        function simulateNotification() {
            const bookings = @Html.Raw(ViewBag.Bookings); // Fetch bookings from ViewBag
            // Access the bookings array from the Item2 property
            const bookingsArray = bookings.Item2 || []; // Default to an empty array if Item2 is not present
            // Check for upcoming bookings
            const now = new Date();
            const thirtyMinutesInMillis = 30 * 60 * 1000; // 30 minutes in milliseconds

            bookingsArray.forEach(booking => {
                const bookingDate = new Date(booking.time);
                const timeDifference = bookingDate - now;

                // Check if the booking is upcoming and not already notified
                if (timeDifference > 0 && timeDifference <= thirtyMinutesInMillis && !notifiedBookings.has(booking.bookingRefId)) {
                    const message = `Your booking with ID: ${booking.bookingRefId} will start in 30 minutes!`;
                    showToast(message, 'Get ready for your booking!');
                    // Add the booking ID to the notified set
                    notifiedBookings.add(booking.bookingRefId);
                }
            });
        }


        setInterval(simulateNotification, 5000);
    </script>
}