@model IEnumerable<ASI.Basecode.Data.Models.Notification>

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>@ViewData["Title"]</title>
    <link href="https://cdn.jsdelivr.net/npm/fullcalendar@6.1.15/main.min.css" rel="stylesheet" />
    <link href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css" rel="stylesheet">
    <style>
        .notification-item {
            padding: 15px;
            border: 1px solid #ddd;
            margin-bottom: 10px;
            border-radius: 5px;
            position: relative;
            cursor: pointer;
            background-color: #fff;
            transition: background-color 0.2s;
        }

            .notification-item:hover {
                background-color: #f8f9fa;
            }

            .notification-item.unread {
                border-left: 4px solid #0d6efd;
                background-color: #f8f9fa;
            }

        .notification-header {
            display: flex;
            justify-content: space-between;
            font-weight: bold;
            color: #333;
        }

        .notification-body {
            margin-top: 10px;
        }

        .notification-date {
            color: #6c757d;
            font-size: 0.875rem;
            margin-top: 10px;
        }

        .delete-notification {
            position: absolute;
            top: 10px;
            right: 10px;
            cursor: pointer;
            color: #dc3545;
            font-weight: bold;
            padding: 5px 10px;
        }

            .delete-notification:hover {
                color: #bb2d3b;
            }

        .toast-container {
            position: fixed;
            bottom: 20px;
            right: 20px;
            z-index: 1050;
        }

        .toast {
            background-color: white;
            margin-bottom: 10px;
        }
    </style>
</head>
<body>
    <div class="container mt-5">
        <h1 class="fw-bold mb-3">@ViewData["Title"]</h1>
        <div id="notificationsContainer">
            @if (Model != null && Model.Any())
            {
                foreach (var notification in Model)
                {
                    <div class="notification-item @(notification.IsRead ? "" : "unread")" data-notification-id="@notification.Id">
                        <div class="notification-content" data-bs-toggle="modal" data-bs-target="#viewNotificationModal"
                             data-notification-id="@notification.Id"
                             data-notification-message="@notification.Message"
                             data-notification-date="@notification.Date.ToString("F")">
                            <div class="notification-body mt-2">
                                <p>@notification.Message</p>
                                <div class="notification-date">
                                    @notification.Date.ToString("MMMM dd, yyyy HH:mm:ss")
                                </div>
                            </div>
                        </div>
                        <form asp-action="DeleteNotification" method="post" style="display:inline;">
                            @Html.AntiForgeryToken()
                            <input type="hidden" name="id" value="@notification.Id" />
                            <button type="submit" class="delete-notification btn btn-link" title="Delete Notification">X</button>
                        </form>
                    </div>
                }
            }
            else
            {
                <div class="alert alert-info">
                    <strong>No notifications found.</strong>
                </div>
            }
        </div>
    </div>

   
    <div class="modal fade" id="viewNotificationModal" tabindex="-1" aria-labelledby="viewNotificationModalLabel" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="viewNotificationModalLabel">Notification Details</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <p id="notificationMessage"></p>
                    <p id="notificationDate" class="text-muted"></p>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                </div>
            </div>
        </div>
    </div>

   
    <div class="toast-container"></div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/js/bootstrap.bundle.min.js"></script>
    <script>
        const viewNotificationModal = document.getElementById('viewNotificationModal');
        viewNotificationModal.addEventListener('show.bs.modal', function (event) {
            const notificationItem = event.relatedTarget;
            const notificationId = notificationItem.getAttribute('data-notification-id');
            const message = notificationItem.getAttribute('data-notification-message');
            const date = notificationItem.getAttribute('data-notification-date');

            const modalBody = viewNotificationModal.querySelector('.modal-body');
            modalBody.querySelector('#notificationMessage').textContent = message;
            modalBody.querySelector('#notificationDate').textContent = 'Sent on: ' + date;

            notificationItem.classList.remove('unread');
        });



        function showToast(message) {
            const toastContainer = document.querySelector('.toast-container');
            const toastElement = document.createElement('div');
            toastElement.classList.add('toast');
            toastElement.setAttribute('role', 'alert');
            toastElement.setAttribute('aria-live', 'assertive');
            toastElement.setAttribute('aria-atomic', 'true');

            toastElement.innerHTML = `
                <div class="toast-header">
                    <strong class="me-auto">New Notification</strong>
                    <small>Just now</small>
                    <button type="button" class="btn-close" data-bs-dismiss="toast" aria-label="Close"></button>
                </div>
                <div class="toast-body">
                    ${message}
                </div>
            `;

            toastContainer.appendChild(toastElement);

           
            const toast = new bootstrap.Toast(toastElement, {
                autohide: true,
                delay: 4000 
            });

            toast.show();

           
            toastElement.addEventListener('hidden.bs.toast', () => {
                toastElement.remove();
            });
        }



        function simulateNotification() {
            // Fetch the first notification
            const messages = @Html.Raw(Json.Serialize(Model.Select(n => n.Message)));
            if (messages.length > 0) {
                const firstMessage = messages[0]; // Get the first message
                showToast(firstMessage);
            }
        }



 
        setInterval(simulateNotification, 5000);
    </script>
</body>
</html>
